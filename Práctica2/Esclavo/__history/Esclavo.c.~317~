// ESCLAVO Comunicación SPI
//#include <18F4550.H> 
#include <16f877a.h>

#device adc=10
#fuses XT, NOWDT, NOPROTECT, BROWNOUT, PUT, NOLVP 
#use delay(crystal=4000000) 
#use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7) 

#byte SSPBUF = 0x13  // Dirección del Registro para 16F877 
//#byte SSPBUF = 0xFC9  // Dirección del Registro para 18F4550

// Modos de comunicación SPI 
#define SPI_MODE_0  (SPI_L_TO_H | SPI_XMIT_L_TO_H) 

#define use_portd_lcd true
#include <lcd.c>

// Variable global para almacenar el ADC 
int16 pot; 
float voltajeTecleado = 0;
float voltajeSeteado = 0;
float voltajeMedido = 0;
int8 voltajeArray[] = {0,0,0};



static int8 contador = 0;
static int8 aux = 0; 
static int8 ventilador = 0;
// Interrupción por SPI donde se analiza las solicitudes del Maestro
#int_ssp 
void ssp_isr(void) 
{ 
   printf("\n\rINT%i", contador);
   contador++;
   
   int8 comando;
   comando = SSPBUF;
   switch(comando)
   {
      case '1':
         //printf("\n\rLlega 1");
         aux = 1;
      break;
      case '2':
         //printf("\n\rLlega 2");
         aux = 2;
      break;
      case '3':
         //printf("\n\rLlega 3");
         aux = 3;
      break;
      case '4':
         //printf("\n\rLlega 4");
         aux = 4;
      break;
      case '5':
         //printf("\n\rLlega 5");
         aux = 5;
      break;
      case '6':
         //printf("\n\rLlega 6");
         aux = 6;
      break;
      case '7':
         //printf("\n\rLlega 7");
         aux = 7;
      break;
      case '8':
         //printf("\n\rLlega 8");
         aux = 8;
      break;
      case '9':
         //printf("\n\rLlega 9");
         aux = 9;
      break;
      case '*':
         //printf("\n\rLlega 9");
         voltajeArray[0] = 0;
         voltajeArray[1] = 0;
         voltajeArray[2] = 0;
         aux = 0;
         contador=3;
      break;
      case '#':
         voltajeSeteado = voltajeTecleado;
         voltajeArray[0] = 0;
         voltajeArray[1] = 0;
         voltajeArray[2] = 0;
         aux = 0;
         contador=3;
         
      break;
      
   }
   
   voltajeArray[contador-1] = aux;
   if(contador==3)
      contador = 0;
   //printf(" El auxiliar es %i y el contador esta en %i", aux, contador);
   //printf(" El voltaje seria %i.%i%i", voltajeArray[0],voltajeArray[1],voltajeArray[2]);
   voltajeTecleado = voltajeArray[0] + voltajeArray[1]*(.1) + voltajeArray[2] * (.01);
   printf("\n\rEl voltaje tecleado es %f", voltajeTecleado);
   printf("\n\rEl voltaje seteado es %f", voltajeSeteado);
   printf("\n\rEl voltaje medido es %f", voltajeMedido);
   
} 
      //====================================== 
void main() 
{ 
   //-----------------BLOQUE  ADC-----------------
   // Configura AN0 como analoga
   setup_adc_ports(AN0); //16F887
   setup_adc(ADC_CLOCK_DIV_8); 
   set_adc_channel(0); 
   //-----------------BLOQUE  ADC-----------------
   
   delay_us(20); 
   
   //-----------------BLOQUE  SPI-----------------
   //Inicializa el hardware SSP para ser un SPI esclavo en Modo 0
   setup_spi(SPI_SLAVE | SPI_MODE_0); 
   // Habilita las interrupciones
   clear_interrupt(INT_SSP); 
   enable_interrupts(INT_SSP); 
   enable_interrupts(GLOBAL); 
   //-----------------BLOQUE  SPI-----------------
   
   //-----------------BLOQUE  LCD-----------------
   lcd_init();
   //-----------------BLOQUE  LCD-----------------
   
   // Actualiza la lectura analoga cada 20ms 
   while(1) 
   { 
      pot = read_adc(); 
      voltajeMedido = (5.0*pot/1024.0);
      //printf("Voltaje: %f\n\r", voltaje);
      delay_ms(20); 
      if(voltajeMedido>=voltajeSeteado)
         ventilador = 1;
      else
         ventilador = 0;
      output_b(ventilador);
      lcd_gotoxy (1,1);
      printf(lcd_putc, "Vm=%f", voltajeMedido);
      lcd_gotoxy (10,1);
      printf(lcd_putc, "Vs=%f", voltajeSeteado);
      lcd_gotoxy (1,2);
      printf(lcd_putc, "Vt=%f", voltajeTecleado);
      lcd_gotoxy (10,2);
      if(ventilador)
         printf(lcd_putc, "\fON");
      else
         printf(lcd_putc, "\fOFF");
   } 
}


