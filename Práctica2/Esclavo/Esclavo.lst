CCS PCM C Compiler, Version 5.083, 13314               22-Oct-19 21:49

               Filename:   C:\Users\Brando Sanchez\Documents\CCS C Projects\Ejemplo\Esclavo\Esclavo.lst

               ROM used:   2564 words (31%)
                           Largest free fragment is 2048
               RAM used:   42 (11%) at main() level
                           91 (25%) worst case
               Stack used: 8 locations (5 in main + 3 for interrupts)
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   0EB
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.3
002A:  GOTO   02D
002B:  BTFSC  0C.3
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   3C7
.................... // ESCLAVO Comunicación SPI 
.................... //#include <18F4550.H>  
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0051:  MOVF   0B,W
0052:  MOVWF  5D
0053:  BCF    0B.7
0054:  BSF    03.5
0055:  BSF    03.6
0056:  BSF    0C.7
0057:  BSF    0C.0
0058:  NOP
0059:  NOP
005A:  BCF    03.5
005B:  BCF    03.6
005C:  BTFSC  5D.7
005D:  BSF    0B.7
005E:  BTFSC  03.0
005F:  GOTO   089
0060:  BSF    03.6
0061:  MOVF   0C,W
0062:  ANDLW  7F
0063:  BCF    03.6
0064:  MOVWF  5D
0065:  BSF    03.6
0066:  MOVF   0D,W
0067:  BCF    03.6
0068:  MOVWF  5E
0069:  BSF    03.6
006A:  MOVF   0F,W
006B:  BCF    03.6
006C:  MOVWF  5F
006D:  MOVF   5D,W
006E:  BTFSS  0C.4
006F:  GOTO   06E
0070:  MOVWF  19
0071:  MOVF   5E,W
0072:  BSF    03.6
0073:  MOVWF  0D
0074:  BCF    03.6
0075:  MOVF   5F,W
0076:  BSF    03.6
0077:  MOVWF  0F
0078:  BCF    03.6
0079:  MOVF   0B,W
007A:  MOVWF  60
007B:  BCF    0B.7
007C:  BSF    03.5
007D:  BSF    03.6
007E:  BSF    0C.7
007F:  BSF    0C.0
0080:  NOP
0081:  NOP
0082:  BCF    03.5
0083:  BCF    03.6
0084:  BTFSC  60.7
0085:  BSF    0B.7
0086:  DECFSZ 5C,F
0087:  GOTO   089
0088:  GOTO   0A9
0089:  BSF    03.6
008A:  RLF    0C,W
008B:  RLF    0E,W
008C:  ANDLW  7F
008D:  BCF    03.6
008E:  MOVWF  5D
008F:  BSF    03.6
0090:  MOVF   0D,W
0091:  BCF    03.6
0092:  MOVWF  5E
0093:  BSF    03.6
0094:  MOVF   0F,W
0095:  BCF    03.6
0096:  MOVWF  5F
0097:  MOVF   5D,W
0098:  BTFSS  0C.4
0099:  GOTO   098
009A:  MOVWF  19
009B:  MOVF   5E,W
009C:  BSF    03.6
009D:  MOVWF  0D
009E:  BCF    03.6
009F:  MOVF   5F,W
00A0:  BSF    03.6
00A1:  MOVWF  0F
00A2:  INCF   0D,F
00A3:  BTFSC  03.2
00A4:  INCF   0F,F
00A5:  BCF    03.0
00A6:  BCF    03.6
00A7:  DECFSZ 5C,F
00A8:  GOTO   051
00A9:  RETURN
00AA:  MOVF   63,W
00AB:  CLRF   78
00AC:  SUBWF  62,W
00AD:  BTFSC  03.0
00AE:  GOTO   0B2
00AF:  MOVF   62,W
00B0:  MOVWF  77
00B1:  GOTO   0BE
00B2:  CLRF   77
00B3:  MOVLW  08
00B4:  MOVWF  64
00B5:  RLF    62,F
00B6:  RLF    77,F
00B7:  MOVF   63,W
00B8:  SUBWF  77,W
00B9:  BTFSC  03.0
00BA:  MOVWF  77
00BB:  RLF    78,F
00BC:  DECFSZ 64,F
00BD:  GOTO   0B5
00BE:  RETURN
00BF:  MOVLW  8E
00C0:  MOVWF  77
00C1:  MOVF   65,W
00C2:  MOVWF  78
00C3:  MOVF   64,W
00C4:  MOVWF  79
00C5:  CLRF   7A
00C6:  MOVF   78,F
00C7:  BTFSS  03.2
00C8:  GOTO   0D3
00C9:  MOVF   79,W
00CA:  MOVWF  78
00CB:  CLRF   79
00CC:  MOVLW  08
00CD:  SUBWF  77,F
00CE:  MOVF   78,F
00CF:  BTFSS  03.2
00D0:  GOTO   0D3
00D1:  CLRF   77
00D2:  GOTO   0DB
00D3:  BCF    03.0
00D4:  BTFSC  78.7
00D5:  GOTO   0DA
00D6:  RLF    79,F
00D7:  RLF    78,F
00D8:  DECF   77,F
00D9:  GOTO   0D3
00DA:  BCF    78.7
00DB:  RETURN
00DC:  MOVF   69,W
00DD:  BTFSC  03.2
00DE:  GOTO   14C
00DF:  MOVWF  71
00E0:  MOVF   6D,W
00E1:  BTFSC  03.2
00E2:  GOTO   14C
00E3:  ADDWF  71,F
00E4:  BTFSC  03.0
00E5:  GOTO   0ED
00E6:  MOVLW  7F
00E7:  SUBWF  71,F
00E8:  BTFSS  03.0
00E9:  GOTO   14C
00EA:  BTFSC  03.2
00EB:  GOTO   14C
00EC:  GOTO   0F1
00ED:  MOVLW  81
00EE:  ADDWF  71,F
00EF:  BTFSC  03.0
00F0:  GOTO   14C
00F1:  MOVF   71,W
00F2:  MOVWF  77
00F3:  CLRF   78
00F4:  CLRF   79
00F5:  CLRF   7A
00F6:  MOVF   6A,W
00F7:  MOVWF  75
00F8:  BSF    75.7
00F9:  MOVF   6B,W
00FA:  MOVWF  74
00FB:  MOVF   6C,W
00FC:  MOVWF  73
00FD:  MOVLW  18
00FE:  MOVWF  71
00FF:  CLRF   72
0100:  BTFSS  73.0
0101:  GOTO   11A
0102:  MOVF   70,W
0103:  ADDWF  7A,F
0104:  BTFSS  03.0
0105:  GOTO   10C
0106:  INCF   79,F
0107:  BTFSS  03.2
0108:  GOTO   10C
0109:  INCF   78,F
010A:  BTFSC  03.2
010B:  BSF    72.7
010C:  MOVF   6F,W
010D:  ADDWF  79,F
010E:  BTFSS  03.0
010F:  GOTO   113
0110:  INCF   78,F
0111:  BTFSC  03.2
0112:  BSF    72.7
0113:  MOVF   6E,W
0114:  MOVWF  6B
0115:  BSF    6B.7
0116:  MOVF   6B,W
0117:  ADDWF  78,F
0118:  BTFSC  03.0
0119:  BSF    72.7
011A:  RLF    72,F
011B:  RRF    78,F
011C:  RRF    79,F
011D:  RRF    7A,F
011E:  RRF    75,F
011F:  RRF    74,F
0120:  RRF    73,F
0121:  BCF    03.0
0122:  DECFSZ 71,F
0123:  GOTO   0FF
0124:  MOVLW  01
0125:  ADDWF  77,F
0126:  BTFSC  03.0
0127:  GOTO   14C
0128:  BTFSC  78.7
0129:  GOTO   131
012A:  RLF    75,F
012B:  RLF    7A,F
012C:  RLF    79,F
012D:  RLF    78,F
012E:  DECF   77,F
012F:  BTFSC  03.2
0130:  GOTO   14C
0131:  BTFSS  75.7
0132:  GOTO   142
0133:  INCF   7A,F
0134:  BTFSS  03.2
0135:  GOTO   142
0136:  INCF   79,F
0137:  BTFSS  03.2
0138:  GOTO   142
0139:  INCF   78,F
013A:  BTFSS  03.2
013B:  GOTO   142
013C:  RRF    78,F
013D:  RRF    79,F
013E:  RRF    7A,F
013F:  INCF   77,F
0140:  BTFSC  03.2
0141:  GOTO   14C
0142:  MOVF   6A,W
0143:  MOVWF  72
0144:  MOVF   6E,W
0145:  XORWF  72,F
0146:  BTFSS  72.7
0147:  GOTO   14A
0148:  BSF    78.7
0149:  GOTO   150
014A:  BCF    78.7
014B:  GOTO   150
014C:  CLRF   77
014D:  CLRF   78
014E:  CLRF   79
014F:  CLRF   7A
0150:  RETURN
0151:  MOVLW  80
0152:  BTFSC  03.1
0153:  XORWF  69,F
0154:  CLRF   6E
0155:  CLRF   6F
0156:  MOVF   65,W
0157:  MOVWF  6D
0158:  MOVF   69,W
0159:  XORWF  6D,F
015A:  MOVF   64,W
015B:  BTFSC  03.2
015C:  GOTO   241
015D:  MOVWF  6C
015E:  MOVWF  77
015F:  MOVF   68,W
0160:  BTFSC  03.2
0161:  GOTO   24A
0162:  SUBWF  6C,F
0163:  BTFSC  03.2
0164:  GOTO   1E6
0165:  BTFSS  03.0
0166:  GOTO   1A4
0167:  MOVF   69,W
0168:  MOVWF  72
0169:  BSF    72.7
016A:  MOVF   6A,W
016B:  MOVWF  71
016C:  MOVF   6B,W
016D:  MOVWF  70
016E:  CLRF   6F
016F:  BCF    03.0
0170:  RRF    72,F
0171:  RRF    71,F
0172:  RRF    70,F
0173:  RRF    6F,F
0174:  DECFSZ 6C,F
0175:  GOTO   16E
0176:  BTFSS  6D.7
0177:  GOTO   17B
0178:  BSF    6E.0
0179:  GOTO   25E
017A:  BCF    6E.0
017B:  BCF    6C.0
017C:  BSF    6E.4
017D:  MOVLW  67
017E:  MOVWF  04
017F:  BCF    03.7
0180:  GOTO   273
0181:  BCF    6E.4
0182:  BTFSC  6D.7
0183:  GOTO   18E
0184:  BTFSS  6C.0
0185:  GOTO   199
0186:  RRF    72,F
0187:  RRF    71,F
0188:  RRF    70,F
0189:  RRF    6F,F
018A:  INCF   77,F
018B:  BTFSC  03.2
018C:  GOTO   259
018D:  GOTO   199
018E:  BTFSC  72.7
018F:  GOTO   19C
0190:  BCF    03.0
0191:  RLF    6F,F
0192:  RLF    70,F
0193:  RLF    71,F
0194:  RLF    72,F
0195:  DECF   77,F
0196:  BTFSC  03.2
0197:  GOTO   259
0198:  GOTO   18E
0199:  BSF    6E.6
019A:  GOTO   206
019B:  BCF    6E.6
019C:  MOVF   65,W
019D:  MOVWF  6D
019E:  BTFSS  6D.7
019F:  GOTO   1A2
01A0:  BSF    72.7
01A1:  GOTO   252
01A2:  BCF    72.7
01A3:  GOTO   252
01A4:  MOVF   68,W
01A5:  MOVWF  6C
01A6:  MOVWF  77
01A7:  MOVF   64,W
01A8:  SUBWF  6C,F
01A9:  MOVF   65,W
01AA:  MOVWF  72
01AB:  BSF    72.7
01AC:  MOVF   66,W
01AD:  MOVWF  71
01AE:  MOVF   67,W
01AF:  MOVWF  70
01B0:  CLRF   6F
01B1:  BCF    03.0
01B2:  RRF    72,F
01B3:  RRF    71,F
01B4:  RRF    70,F
01B5:  RRF    6F,F
01B6:  DECFSZ 6C,F
01B7:  GOTO   1B0
01B8:  BTFSS  6D.7
01B9:  GOTO   1BD
01BA:  BSF    6E.1
01BB:  GOTO   25E
01BC:  BCF    6E.1
01BD:  BCF    6C.0
01BE:  BSF    6E.5
01BF:  MOVLW  6B
01C0:  MOVWF  04
01C1:  BCF    03.7
01C2:  GOTO   273
01C3:  BCF    6E.5
01C4:  BTFSC  6D.7
01C5:  GOTO   1D0
01C6:  BTFSS  6C.0
01C7:  GOTO   1DB
01C8:  RRF    72,F
01C9:  RRF    71,F
01CA:  RRF    70,F
01CB:  RRF    6F,F
01CC:  INCF   77,F
01CD:  BTFSC  03.2
01CE:  GOTO   259
01CF:  GOTO   1DB
01D0:  BTFSC  72.7
01D1:  GOTO   1DE
01D2:  BCF    03.0
01D3:  RLF    6F,F
01D4:  RLF    70,F
01D5:  RLF    71,F
01D6:  RLF    72,F
01D7:  DECF   77,F
01D8:  BTFSC  03.2
01D9:  GOTO   259
01DA:  GOTO   1D0
01DB:  BSF    6E.7
01DC:  GOTO   206
01DD:  BCF    6E.7
01DE:  MOVF   69,W
01DF:  MOVWF  6D
01E0:  BTFSS  6D.7
01E1:  GOTO   1E4
01E2:  BSF    72.7
01E3:  GOTO   252
01E4:  BCF    72.7
01E5:  GOTO   252
01E6:  MOVF   69,W
01E7:  MOVWF  72
01E8:  BSF    72.7
01E9:  MOVF   6A,W
01EA:  MOVWF  71
01EB:  MOVF   6B,W
01EC:  MOVWF  70
01ED:  BTFSS  6D.7
01EE:  GOTO   1F3
01EF:  BCF    72.7
01F0:  BSF    6E.2
01F1:  GOTO   25E
01F2:  BCF    6E.2
01F3:  CLRF   6F
01F4:  BCF    6C.0
01F5:  MOVLW  67
01F6:  MOVWF  04
01F7:  BCF    03.7
01F8:  GOTO   273
01F9:  BTFSC  6D.7
01FA:  GOTO   21C
01FB:  MOVF   65,W
01FC:  MOVWF  6D
01FD:  BTFSS  6C.0
01FE:  GOTO   206
01FF:  RRF    72,F
0200:  RRF    71,F
0201:  RRF    70,F
0202:  RRF    6F,F
0203:  INCF   77,F
0204:  BTFSC  03.2
0205:  GOTO   259
0206:  BTFSS  6F.7
0207:  GOTO   217
0208:  INCF   70,F
0209:  BTFSS  03.2
020A:  GOTO   217
020B:  INCF   71,F
020C:  BTFSS  03.2
020D:  GOTO   217
020E:  INCF   72,F
020F:  BTFSS  03.2
0210:  GOTO   217
0211:  RRF    72,F
0212:  RRF    71,F
0213:  RRF    70,F
0214:  INCF   77,F
0215:  BTFSC  03.2
0216:  GOTO   259
0217:  BTFSC  6E.6
0218:  GOTO   19B
0219:  BTFSC  6E.7
021A:  GOTO   1DD
021B:  GOTO   23B
021C:  MOVLW  80
021D:  XORWF  72,F
021E:  BTFSS  72.7
021F:  GOTO   224
0220:  GOTO   25E
0221:  MOVF   69,W
0222:  MOVWF  6D
0223:  GOTO   231
0224:  MOVF   65,W
0225:  MOVWF  6D
0226:  MOVF   72,F
0227:  BTFSS  03.2
0228:  GOTO   231
0229:  MOVF   71,F
022A:  BTFSS  03.2
022B:  GOTO   231
022C:  MOVF   70,F
022D:  BTFSS  03.2
022E:  GOTO   231
022F:  CLRF   77
0230:  GOTO   252
0231:  BTFSC  72.7
0232:  GOTO   23B
0233:  BCF    03.0
0234:  RLF    6F,F
0235:  RLF    70,F
0236:  RLF    71,F
0237:  RLF    72,F
0238:  DECFSZ 77,F
0239:  GOTO   231
023A:  GOTO   259
023B:  BTFSS  6D.7
023C:  GOTO   23F
023D:  BSF    72.7
023E:  GOTO   252
023F:  BCF    72.7
0240:  GOTO   252
0241:  MOVF   68,W
0242:  MOVWF  77
0243:  MOVF   69,W
0244:  MOVWF  72
0245:  MOVF   6A,W
0246:  MOVWF  71
0247:  MOVF   6B,W
0248:  MOVWF  70
0249:  GOTO   252
024A:  MOVF   64,W
024B:  MOVWF  77
024C:  MOVF   65,W
024D:  MOVWF  72
024E:  MOVF   66,W
024F:  MOVWF  71
0250:  MOVF   67,W
0251:  MOVWF  70
0252:  MOVF   72,W
0253:  MOVWF  78
0254:  MOVF   71,W
0255:  MOVWF  79
0256:  MOVF   70,W
0257:  MOVWF  7A
0258:  GOTO   291
0259:  CLRF   77
025A:  CLRF   78
025B:  CLRF   79
025C:  CLRF   7A
025D:  GOTO   291
025E:  CLRF   6F
025F:  COMF   70,F
0260:  COMF   71,F
0261:  COMF   72,F
0262:  COMF   6F,F
0263:  INCF   6F,F
0264:  BTFSS  03.2
0265:  GOTO   26C
0266:  INCF   70,F
0267:  BTFSS  03.2
0268:  GOTO   26C
0269:  INCF   71,F
026A:  BTFSC  03.2
026B:  INCF   72,F
026C:  BTFSC  6E.0
026D:  GOTO   17A
026E:  BTFSC  6E.1
026F:  GOTO   1BC
0270:  BTFSC  6E.2
0271:  GOTO   1F2
0272:  GOTO   221
0273:  MOVF   00,W
0274:  ADDWF  70,F
0275:  BTFSS  03.0
0276:  GOTO   27D
0277:  INCF   71,F
0278:  BTFSS  03.2
0279:  GOTO   27D
027A:  INCF   72,F
027B:  BTFSC  03.2
027C:  BSF    6C.0
027D:  DECF   04,F
027E:  MOVF   00,W
027F:  ADDWF  71,F
0280:  BTFSS  03.0
0281:  GOTO   285
0282:  INCF   72,F
0283:  BTFSC  03.2
0284:  BSF    6C.0
0285:  DECF   04,F
0286:  MOVF   00,W
0287:  BTFSS  00.7
0288:  XORLW  80
0289:  ADDWF  72,F
028A:  BTFSC  03.0
028B:  BSF    6C.0
028C:  BTFSC  6E.4
028D:  GOTO   181
028E:  BTFSC  6E.5
028F:  GOTO   1C3
0290:  GOTO   1F9
0291:  RETURN
0292:  MOVF   69,W
0293:  SUBLW  B6
0294:  MOVWF  69
0295:  CLRF   7A
0296:  MOVF   6A,W
0297:  MOVWF  6D
0298:  BSF    6A.7
0299:  BCF    03.0
029A:  RRF    6A,F
029B:  RRF    6B,F
029C:  RRF    6C,F
029D:  RRF    7A,F
029E:  RRF    79,F
029F:  RRF    78,F
02A0:  RRF    77,F
02A1:  DECFSZ 69,F
02A2:  GOTO   299
02A3:  BTFSS  6D.7
02A4:  GOTO   2B0
02A5:  COMF   77,F
02A6:  COMF   78,F
02A7:  COMF   79,F
02A8:  COMF   7A,F
02A9:  INCF   77,F
02AA:  BTFSC  03.2
02AB:  INCF   78,F
02AC:  BTFSC  03.2
02AD:  INCF   79,F
02AE:  BTFSC  03.2
02AF:  INCF   7A,F
02B0:  RETURN
02B1:  BTFSC  03.1
02B2:  GOTO   2B6
02B3:  MOVLW  71
02B4:  MOVWF  04
02B5:  BCF    03.7
02B6:  CLRF   77
02B7:  CLRF   78
02B8:  CLRF   79
02B9:  CLRF   7A
02BA:  CLRF   71
02BB:  CLRF   72
02BC:  CLRF   73
02BD:  CLRF   74
02BE:  MOVF   70,W
02BF:  IORWF  6F,W
02C0:  IORWF  6E,W
02C1:  IORWF  6D,W
02C2:  BTFSC  03.2
02C3:  GOTO   2F4
02C4:  MOVLW  20
02C5:  MOVWF  75
02C6:  BCF    03.0
02C7:  RLF    69,F
02C8:  RLF    6A,F
02C9:  RLF    6B,F
02CA:  RLF    6C,F
02CB:  RLF    71,F
02CC:  RLF    72,F
02CD:  RLF    73,F
02CE:  RLF    74,F
02CF:  MOVF   70,W
02D0:  SUBWF  74,W
02D1:  BTFSS  03.2
02D2:  GOTO   2DD
02D3:  MOVF   6F,W
02D4:  SUBWF  73,W
02D5:  BTFSS  03.2
02D6:  GOTO   2DD
02D7:  MOVF   6E,W
02D8:  SUBWF  72,W
02D9:  BTFSS  03.2
02DA:  GOTO   2DD
02DB:  MOVF   6D,W
02DC:  SUBWF  71,W
02DD:  BTFSS  03.0
02DE:  GOTO   2EE
02DF:  MOVF   6D,W
02E0:  SUBWF  71,F
02E1:  MOVF   6E,W
02E2:  BTFSS  03.0
02E3:  INCFSZ 6E,W
02E4:  SUBWF  72,F
02E5:  MOVF   6F,W
02E6:  BTFSS  03.0
02E7:  INCFSZ 6F,W
02E8:  SUBWF  73,F
02E9:  MOVF   70,W
02EA:  BTFSS  03.0
02EB:  INCFSZ 70,W
02EC:  SUBWF  74,F
02ED:  BSF    03.0
02EE:  RLF    77,F
02EF:  RLF    78,F
02F0:  RLF    79,F
02F1:  RLF    7A,F
02F2:  DECFSZ 75,F
02F3:  GOTO   2C6
02F4:  MOVF   71,W
02F5:  MOVWF  00
02F6:  INCF   04,F
02F7:  MOVF   72,W
02F8:  MOVWF  00
02F9:  INCF   04,F
02FA:  MOVF   73,W
02FB:  MOVWF  00
02FC:  INCF   04,F
02FD:  MOVF   74,W
02FE:  MOVWF  00
02FF:  RETURN
0300:  MOVF   04,W
0301:  MOVWF  61
0302:  MOVF   60,W
0303:  MOVWF  63
0304:  BTFSC  03.2
0305:  GOTO   31F
0306:  MOVF   5F,W
0307:  MOVWF  6C
0308:  MOVF   5E,W
0309:  MOVWF  6B
030A:  MOVF   5D,W
030B:  MOVWF  6A
030C:  MOVF   5C,W
030D:  MOVWF  69
030E:  CLRF   70
030F:  CLRF   6F
0310:  MOVLW  20
0311:  MOVWF  6E
0312:  MOVLW  82
0313:  MOVWF  6D
0314:  CALL   0DC
0315:  MOVF   7A,W
0316:  MOVWF  5F
0317:  MOVF   79,W
0318:  MOVWF  5E
0319:  MOVF   78,W
031A:  MOVWF  5D
031B:  MOVF   77,W
031C:  MOVWF  5C
031D:  DECFSZ 63,F
031E:  GOTO   306
031F:  MOVF   5F,W
0320:  MOVWF  6C
0321:  MOVF   5E,W
0322:  MOVWF  6B
0323:  MOVF   5D,W
0324:  MOVWF  6A
0325:  MOVF   5C,W
0326:  MOVWF  69
0327:  CALL   292
0328:  MOVF   7A,W
0329:  MOVWF  5F
032A:  MOVF   79,W
032B:  MOVWF  5E
032C:  MOVF   78,W
032D:  MOVWF  5D
032E:  MOVF   77,W
032F:  MOVWF  5C
0330:  BTFSS  5F.7
0331:  GOTO   33F
0332:  DECF   61,F
0333:  BSF    61.5
0334:  COMF   5C,F
0335:  COMF   5D,F
0336:  COMF   5E,F
0337:  COMF   5F,F
0338:  INCF   5C,F
0339:  BTFSC  03.2
033A:  INCF   5D,F
033B:  BTFSC  03.2
033C:  INCF   5E,F
033D:  BTFSC  03.2
033E:  INCF   5F,F
033F:  MOVLW  3B
0340:  MOVWF  68
0341:  MOVLW  9A
0342:  MOVWF  67
0343:  MOVLW  CA
0344:  MOVWF  66
0345:  CLRF   65
0346:  MOVLW  0A
0347:  MOVWF  63
0348:  MOVF   60,W
0349:  BTFSC  03.2
034A:  INCF   61,F
034B:  BSF    03.1
034C:  MOVLW  5C
034D:  MOVWF  04
034E:  BCF    03.7
034F:  MOVF   5F,W
0350:  MOVWF  6C
0351:  MOVF   5E,W
0352:  MOVWF  6B
0353:  MOVF   5D,W
0354:  MOVWF  6A
0355:  MOVF   5C,W
0356:  MOVWF  69
0357:  MOVF   68,W
0358:  MOVWF  70
0359:  MOVF   67,W
035A:  MOVWF  6F
035B:  MOVF   66,W
035C:  MOVWF  6E
035D:  MOVF   65,W
035E:  MOVWF  6D
035F:  CALL   2B1
0360:  MOVF   78,W
0361:  MOVF   77,F
0362:  BTFSS  03.2
0363:  GOTO   377
0364:  INCF   60,W
0365:  SUBWF  63,W
0366:  BTFSC  03.2
0367:  GOTO   377
0368:  MOVF   61,W
0369:  BTFSC  03.2
036A:  GOTO   379
036B:  ANDLW  0F
036C:  SUBWF  63,W
036D:  BTFSC  03.2
036E:  GOTO   371
036F:  BTFSC  03.0
0370:  GOTO   3AD
0371:  BTFSC  61.7
0372:  GOTO   3AD
0373:  BTFSC  61.6
0374:  GOTO   379
0375:  MOVLW  20
0376:  GOTO   3A8
0377:  MOVLW  20
0378:  ANDWF  61,F
0379:  BTFSS  61.5
037A:  GOTO   388
037B:  BCF    61.5
037C:  MOVF   60,W
037D:  BTFSS  03.2
037E:  DECF   61,F
037F:  MOVF   77,W
0380:  MOVWF  61
0381:  MOVLW  2D
0382:  BTFSS  0C.4
0383:  GOTO   382
0384:  MOVWF  19
0385:  MOVF   61,W
0386:  MOVWF  77
0387:  CLRF   61
0388:  MOVF   60,W
0389:  SUBWF  63,W
038A:  BTFSS  03.2
038B:  GOTO   397
038C:  MOVF   77,W
038D:  MOVWF  61
038E:  MOVLW  2E
038F:  BTFSS  0C.4
0390:  GOTO   38F
0391:  MOVWF  19
0392:  MOVF   61,W
0393:  MOVWF  77
0394:  MOVLW  20
0395:  ANDWF  61,F
0396:  MOVLW  00
0397:  MOVLW  30
0398:  BTFSS  61.5
0399:  GOTO   3A8
039A:  BCF    61.5
039B:  MOVF   60,W
039C:  BTFSS  03.2
039D:  DECF   61,F
039E:  MOVF   77,W
039F:  MOVWF  61
03A0:  MOVLW  2D
03A1:  BTFSS  0C.4
03A2:  GOTO   3A1
03A3:  MOVWF  19
03A4:  MOVF   61,W
03A5:  MOVWF  77
03A6:  CLRF   61
03A7:  MOVLW  30
03A8:  ADDWF  77,F
03A9:  MOVF   77,W
03AA:  BTFSS  0C.4
03AB:  GOTO   3AA
03AC:  MOVWF  19
03AD:  BCF    03.1
03AE:  MOVF   68,W
03AF:  MOVWF  6C
03B0:  MOVF   67,W
03B1:  MOVWF  6B
03B2:  MOVF   66,W
03B3:  MOVWF  6A
03B4:  MOVF   65,W
03B5:  MOVWF  69
03B6:  CLRF   70
03B7:  CLRF   6F
03B8:  CLRF   6E
03B9:  MOVLW  0A
03BA:  MOVWF  6D
03BB:  CALL   2B1
03BC:  MOVF   7A,W
03BD:  MOVWF  68
03BE:  MOVF   79,W
03BF:  MOVWF  67
03C0:  MOVF   78,W
03C1:  MOVWF  66
03C2:  MOVF   77,W
03C3:  MOVWF  65
03C4:  DECFSZ 63,F
03C5:  GOTO   34B
03C6:  RETURN
*
03D5:  MOVLW  20
03D6:  BTFSS  5D.4
03D7:  MOVLW  30
03D8:  MOVWF  5E
03D9:  MOVF   5C,W
03DA:  MOVWF  77
03DB:  BTFSS  5C.7
03DC:  GOTO   3E5
03DD:  COMF   77,F
03DE:  INCF   77,F
03DF:  MOVF   77,W
03E0:  MOVWF  5C
03E1:  MOVLW  2D
03E2:  MOVWF  5E
03E3:  BSF    5D.7
03E4:  BSF    5D.0
03E5:  MOVF   5C,W
03E6:  MOVWF  62
03E7:  MOVLW  64
03E8:  MOVWF  63
03E9:  CALL   0AA
03EA:  MOVF   77,W
03EB:  MOVWF  5C
03EC:  MOVLW  30
03ED:  ADDWF  78,W
03EE:  MOVWF  5F
03EF:  MOVF   5C,W
03F0:  MOVWF  62
03F1:  MOVLW  0A
03F2:  MOVWF  63
03F3:  CALL   0AA
03F4:  MOVLW  30
03F5:  ADDWF  77,W
03F6:  MOVWF  61
03F7:  MOVLW  30
03F8:  ADDWF  78,W
03F9:  MOVWF  60
03FA:  MOVF   5E,W
03FB:  MOVWF  77
03FC:  MOVLW  30
03FD:  SUBWF  5F,W
03FE:  BTFSC  03.2
03FF:  GOTO   404
0400:  BSF    5D.1
0401:  BTFSC  5D.7
0402:  BSF    5D.2
0403:  GOTO   418
0404:  MOVF   5E,W
0405:  MOVWF  5F
0406:  MOVLW  20
0407:  MOVWF  5E
0408:  MOVLW  30
0409:  SUBWF  60,W
040A:  BTFSC  03.2
040B:  GOTO   410
040C:  BSF    5D.0
040D:  BTFSC  5D.7
040E:  BSF    5D.1
040F:  GOTO   418
0410:  BTFSS  03.2
0411:  BSF    5D.0
0412:  BTFSS  03.2
0413:  GOTO   418
0414:  MOVF   5F,W
0415:  MOVWF  60
0416:  MOVLW  20
0417:  MOVWF  5F
0418:  BTFSC  5D.2
0419:  GOTO   41F
041A:  BTFSC  5D.1
041B:  GOTO   423
041C:  BTFSC  5D.0
041D:  GOTO   427
041E:  GOTO   42B
041F:  MOVF   5E,W
0420:  BTFSS  0C.4
0421:  GOTO   420
0422:  MOVWF  19
0423:  MOVF   5F,W
0424:  BTFSS  0C.4
0425:  GOTO   424
0426:  MOVWF  19
0427:  MOVF   60,W
0428:  BTFSS  0C.4
0429:  GOTO   428
042A:  MOVWF  19
042B:  MOVF   61,W
042C:  BTFSS  0C.4
042D:  GOTO   42C
042E:  MOVWF  19
*
0527:  BSF    0A.0
0528:  BCF    0A.1
0529:  BSF    0A.2
052A:  ADDWF  02,F
052B:  GOTO   45B
052C:  GOTO   469
052D:  GOTO   469
052E:  GOTO   469
052F:  GOTO   469
0530:  GOTO   469
0531:  GOTO   469
0532:  GOTO   454
0533:  GOTO   469
0534:  GOTO   469
0535:  GOTO   469
0536:  GOTO   469
0537:  GOTO   469
0538:  GOTO   469
0539:  GOTO   439
053A:  GOTO   43C
053B:  GOTO   43F
053C:  GOTO   442
053D:  GOTO   445
053E:  GOTO   448
053F:  GOTO   44B
0540:  GOTO   44E
0541:  GOTO   451
0542:  DATA 8A,06
0543:  DATA 49,27
0544:  DATA D4,12
0545:  DATA 69,00
0546:  DATA 8A,06
0547:  DATA 45,36
0548:  DATA 20,3B
0549:  DATA 6F,36
054A:  DATA F4,30
054B:  DATA EA,32
054C:  DATA 20,3A
054D:  DATA E5,31
054E:  DATA EC,32
054F:  DATA 61,32
0550:  DATA 6F,10
0551:  DATA E5,39
0552:  DATA A0,12
0553:  DATA 66,00
0554:  DATA 8A,06
0555:  DATA 45,36
0556:  DATA 20,3B
0557:  DATA 6F,36
0558:  DATA F4,30
0559:  DATA EA,32
055A:  DATA A0,39
055B:  DATA 65,3A
055C:  DATA E5,30
055D:  DATA E4,37
055E:  DATA A0,32
055F:  DATA 73,10
0560:  DATA 25,33
0561:  DATA 00,01
0562:  DATA 8A,06
0563:  DATA 45,36
0564:  DATA 20,3B
0565:  DATA 6F,36
0566:  DATA F4,30
0567:  DATA EA,32
0568:  DATA A0,36
0569:  DATA 65,32
056A:  DATA 69,32
056B:  DATA 6F,10
056C:  DATA E5,39
056D:  DATA A0,12
056E:  DATA 66,00
*
0614:  MOVF   45,W
0615:  BTFSC  03.2
0616:  GOTO   6D9
0617:  MOVWF  51
0618:  MOVF   49,W
0619:  BTFSC  03.2
061A:  GOTO   6D9
061B:  SUBWF  51,F
061C:  BTFSS  03.0
061D:  GOTO   623
061E:  MOVLW  7F
061F:  ADDWF  51,F
0620:  BTFSC  03.0
0621:  GOTO   6D9
0622:  GOTO   629
0623:  MOVLW  81
0624:  SUBWF  51,F
0625:  BTFSS  03.0
0626:  GOTO   6D9
0627:  BTFSC  03.2
0628:  GOTO   6D9
0629:  MOVF   51,W
062A:  MOVWF  77
062B:  CLRF   78
062C:  CLRF   79
062D:  CLRF   7A
062E:  CLRF   50
062F:  MOVF   46,W
0630:  MOVWF  4F
0631:  BSF    4F.7
0632:  MOVF   47,W
0633:  MOVWF  4E
0634:  MOVF   48,W
0635:  MOVWF  4D
0636:  MOVLW  19
0637:  MOVWF  51
0638:  MOVF   4C,W
0639:  SUBWF  4D,F
063A:  BTFSC  03.0
063B:  GOTO   64C
063C:  MOVLW  01
063D:  SUBWF  4E,F
063E:  BTFSC  03.0
063F:  GOTO   64C
0640:  SUBWF  4F,F
0641:  BTFSC  03.0
0642:  GOTO   64C
0643:  SUBWF  50,F
0644:  BTFSC  03.0
0645:  GOTO   64C
0646:  INCF   50,F
0647:  INCF   4F,F
0648:  INCF   4E,F
0649:  MOVF   4C,W
064A:  ADDWF  4D,F
064B:  GOTO   67E
064C:  MOVF   4B,W
064D:  SUBWF  4E,F
064E:  BTFSC  03.0
064F:  GOTO   667
0650:  MOVLW  01
0651:  SUBWF  4F,F
0652:  BTFSC  03.0
0653:  GOTO   667
0654:  SUBWF  50,F
0655:  BTFSC  03.0
0656:  GOTO   667
0657:  INCF   50,F
0658:  INCF   4F,F
0659:  MOVF   4B,W
065A:  ADDWF  4E,F
065B:  MOVF   4C,W
065C:  ADDWF  4D,F
065D:  BTFSS  03.0
065E:  GOTO   67E
065F:  INCF   4E,F
0660:  BTFSS  03.2
0661:  GOTO   67E
0662:  INCF   4F,F
0663:  BTFSS  03.2
0664:  GOTO   67E
0665:  INCF   50,F
0666:  GOTO   67E
0667:  MOVF   4A,W
0668:  IORLW  80
0669:  SUBWF  4F,F
066A:  BTFSC  03.0
066B:  GOTO   67D
066C:  MOVLW  01
066D:  SUBWF  50,F
066E:  BTFSC  03.0
066F:  GOTO   67D
0670:  INCF   50,F
0671:  MOVF   4A,W
0672:  IORLW  80
0673:  ADDWF  4F,F
0674:  MOVF   4B,W
0675:  ADDWF  4E,F
0676:  BTFSS  03.0
0677:  GOTO   65B
0678:  INCF   4F,F
0679:  BTFSS  03.2
067A:  GOTO   65B
067B:  INCF   50,F
067C:  GOTO   65B
067D:  BSF    7A.0
067E:  DECFSZ 51,F
067F:  GOTO   681
0680:  GOTO   68C
0681:  BCF    03.0
0682:  RLF    4D,F
0683:  RLF    4E,F
0684:  RLF    4F,F
0685:  RLF    50,F
0686:  BCF    03.0
0687:  RLF    7A,F
0688:  RLF    79,F
0689:  RLF    78,F
068A:  RLF    52,F
068B:  GOTO   638
068C:  BTFSS  52.0
068D:  GOTO   694
068E:  BCF    03.0
068F:  RRF    78,F
0690:  RRF    79,F
0691:  RRF    7A,F
0692:  RRF    52,F
0693:  GOTO   697
0694:  DECF   77,F
0695:  BTFSC  03.2
0696:  GOTO   6D9
0697:  BTFSC  52.7
0698:  GOTO   6C0
0699:  BCF    03.0
069A:  RLF    4D,F
069B:  RLF    4E,F
069C:  RLF    4F,F
069D:  RLF    50,F
069E:  MOVF   4C,W
069F:  SUBWF  4D,F
06A0:  BTFSC  03.0
06A1:  GOTO   6AC
06A2:  MOVLW  01
06A3:  SUBWF  4E,F
06A4:  BTFSC  03.0
06A5:  GOTO   6AC
06A6:  SUBWF  4F,F
06A7:  BTFSC  03.0
06A8:  GOTO   6AC
06A9:  SUBWF  50,F
06AA:  BTFSS  03.0
06AB:  GOTO   6CF
06AC:  MOVF   4B,W
06AD:  SUBWF  4E,F
06AE:  BTFSC  03.0
06AF:  GOTO   6B7
06B0:  MOVLW  01
06B1:  SUBWF  4F,F
06B2:  BTFSC  03.0
06B3:  GOTO   6B7
06B4:  SUBWF  50,F
06B5:  BTFSS  03.0
06B6:  GOTO   6CF
06B7:  MOVF   4A,W
06B8:  IORLW  80
06B9:  SUBWF  4F,F
06BA:  BTFSC  03.0
06BB:  GOTO   6C0
06BC:  MOVLW  01
06BD:  SUBWF  50,F
06BE:  BTFSS  03.0
06BF:  GOTO   6CF
06C0:  INCF   7A,F
06C1:  BTFSS  03.2
06C2:  GOTO   6CF
06C3:  INCF   79,F
06C4:  BTFSS  03.2
06C5:  GOTO   6CF
06C6:  INCF   78,F
06C7:  BTFSS  03.2
06C8:  GOTO   6CF
06C9:  INCF   77,F
06CA:  BTFSC  03.2
06CB:  GOTO   6D9
06CC:  RRF    78,F
06CD:  RRF    79,F
06CE:  RRF    7A,F
06CF:  MOVF   46,W
06D0:  MOVWF  51
06D1:  MOVF   4A,W
06D2:  XORWF  51,F
06D3:  BTFSS  51.7
06D4:  GOTO   6D7
06D5:  BSF    78.7
06D6:  GOTO   6DD
06D7:  BCF    78.7
06D8:  GOTO   6DD
06D9:  CLRF   77
06DA:  CLRF   78
06DB:  CLRF   79
06DC:  CLRF   7A
06DD:  BSF    0A.3
06DE:  BCF    0A.4
06DF:  GOTO   18F (RETURN)
06E0:  MOVF   42,W
06E1:  MOVWF  49
06E2:  MOVF   46,W
06E3:  XORWF  49,F
06E4:  BTFSS  49.7
06E5:  GOTO   6EB
06E6:  BCF    03.2
06E7:  BCF    03.0
06E8:  BTFSC  42.7
06E9:  BSF    03.0
06EA:  GOTO   71E
06EB:  MOVF   42,W
06EC:  MOVWF  49
06ED:  MOVF   45,W
06EE:  MOVWF  4A
06EF:  MOVF   41,W
06F0:  SUBWF  4A,F
06F1:  BTFSC  03.2
06F2:  GOTO   6F9
06F3:  BTFSS  49.7
06F4:  GOTO   71E
06F5:  MOVF   03,W
06F6:  XORLW  01
06F7:  MOVWF  03
06F8:  GOTO   71E
06F9:  MOVF   46,W
06FA:  MOVWF  4A
06FB:  MOVF   42,W
06FC:  SUBWF  4A,F
06FD:  BTFSC  03.2
06FE:  GOTO   705
06FF:  BTFSS  49.7
0700:  GOTO   71E
0701:  MOVF   03,W
0702:  XORLW  01
0703:  MOVWF  03
0704:  GOTO   71E
0705:  MOVF   47,W
0706:  MOVWF  4A
0707:  MOVF   43,W
0708:  SUBWF  4A,F
0709:  BTFSC  03.2
070A:  GOTO   711
070B:  BTFSS  49.7
070C:  GOTO   71E
070D:  MOVF   03,W
070E:  XORLW  01
070F:  MOVWF  03
0710:  GOTO   71E
0711:  MOVF   48,W
0712:  MOVWF  4A
0713:  MOVF   44,W
0714:  SUBWF  4A,F
0715:  BTFSC  03.2
0716:  GOTO   71D
0717:  BTFSS  49.7
0718:  GOTO   71E
0719:  MOVF   03,W
071A:  XORLW  01
071B:  MOVWF  03
071C:  GOTO   71E
071D:  BCF    03.0
071E:  BSF    0A.3
071F:  BCF    0A.4
0720:  GOTO   1AF (RETURN)
*
075F:  MOVLW  20
0760:  BTFSS  42.4
0761:  MOVLW  30
0762:  MOVWF  43
0763:  MOVF   41,W
0764:  MOVWF  77
0765:  BTFSS  41.7
0766:  GOTO   76F
0767:  COMF   77,F
0768:  INCF   77,F
0769:  MOVF   77,W
076A:  MOVWF  41
076B:  MOVLW  2D
076C:  MOVWF  43
076D:  BSF    42.7
076E:  BSF    42.0
076F:  MOVF   78,W
0770:  CLRF   2B
0771:  BTFSC  0B.7
0772:  BSF    2B.7
0773:  BCF    0B.7
0774:  MOVF   41,W
0775:  MOVWF  62
0776:  MOVLW  64
0777:  MOVWF  63
0778:  CALL   0AA
0779:  BTFSC  2B.7
077A:  BSF    0B.7
077B:  MOVF   77,W
077C:  MOVWF  41
077D:  MOVLW  30
077E:  ADDWF  78,W
077F:  MOVWF  44
0780:  CLRF   2B
0781:  BTFSC  0B.7
0782:  BSF    2B.7
0783:  BCF    0B.7
0784:  MOVF   41,W
0785:  MOVWF  62
0786:  MOVLW  0A
0787:  MOVWF  63
0788:  CALL   0AA
0789:  BTFSC  2B.7
078A:  BSF    0B.7
078B:  MOVLW  30
078C:  ADDWF  77,W
078D:  MOVWF  46
078E:  MOVLW  30
078F:  ADDWF  78,W
0790:  MOVWF  45
0791:  MOVF   43,W
0792:  MOVWF  77
0793:  MOVLW  30
0794:  SUBWF  44,W
0795:  BTFSC  03.2
0796:  GOTO   79B
0797:  BSF    42.1
0798:  BTFSC  42.7
0799:  BSF    42.2
079A:  GOTO   7AF
079B:  MOVF   43,W
079C:  MOVWF  44
079D:  MOVLW  20
079E:  MOVWF  43
079F:  MOVLW  30
07A0:  SUBWF  45,W
07A1:  BTFSC  03.2
07A2:  GOTO   7A7
07A3:  BSF    42.0
07A4:  BTFSC  42.7
07A5:  BSF    42.1
07A6:  GOTO   7AF
07A7:  BTFSS  03.2
07A8:  BSF    42.0
07A9:  BTFSS  03.2
07AA:  GOTO   7AF
07AB:  MOVF   44,W
07AC:  MOVWF  45
07AD:  MOVLW  20
07AE:  MOVWF  44
07AF:  BTFSC  42.2
07B0:  GOTO   7B6
07B1:  BTFSC  42.1
07B2:  GOTO   7B9
07B3:  BTFSC  42.0
07B4:  GOTO   7BC
07B5:  GOTO   7BF
07B6:  MOVF   43,W
07B7:  MOVWF  4E
07B8:  CALL   733
07B9:  MOVF   44,W
07BA:  MOVWF  4E
07BB:  CALL   733
07BC:  MOVF   45,W
07BD:  MOVWF  4E
07BE:  CALL   733
07BF:  MOVF   46,W
07C0:  MOVWF  4E
07C1:  CALL   733
07C2:  BSF    0A.3
07C3:  BCF    0A.4
07C4:  GOTO   23C (RETURN)
*
0800:  MOVF   04,W
0801:  MOVWF  46
0802:  MOVF   45,W
0803:  MOVWF  48
0804:  BTFSC  03.2
0805:  GOTO   027
0806:  CLRF   2B
0807:  BTFSC  0B.7
0808:  BSF    2B.7
0809:  BCF    0B.7
080A:  MOVF   44,W
080B:  MOVWF  6C
080C:  MOVF   43,W
080D:  MOVWF  6B
080E:  MOVF   42,W
080F:  MOVWF  6A
0810:  MOVF   41,W
0811:  MOVWF  69
0812:  CLRF   70
0813:  CLRF   6F
0814:  MOVLW  20
0815:  MOVWF  6E
0816:  MOVLW  82
0817:  MOVWF  6D
0818:  BCF    0A.3
0819:  CALL   0DC
081A:  BSF    0A.3
081B:  BTFSC  2B.7
081C:  BSF    0B.7
081D:  MOVF   7A,W
081E:  MOVWF  44
081F:  MOVF   79,W
0820:  MOVWF  43
0821:  MOVF   78,W
0822:  MOVWF  42
0823:  MOVF   77,W
0824:  MOVWF  41
0825:  DECFSZ 48,F
0826:  GOTO   006
0827:  CLRF   2B
0828:  BTFSC  0B.7
0829:  BSF    2B.7
082A:  BCF    0B.7
082B:  MOVF   44,W
082C:  MOVWF  6C
082D:  MOVF   43,W
082E:  MOVWF  6B
082F:  MOVF   42,W
0830:  MOVWF  6A
0831:  MOVF   41,W
0832:  MOVWF  69
0833:  BCF    0A.3
0834:  CALL   292
0835:  BSF    0A.3
0836:  BTFSC  2B.7
0837:  BSF    0B.7
0838:  MOVF   7A,W
0839:  MOVWF  44
083A:  MOVF   79,W
083B:  MOVWF  43
083C:  MOVF   78,W
083D:  MOVWF  42
083E:  MOVF   77,W
083F:  MOVWF  41
0840:  BTFSS  44.7
0841:  GOTO   04F
0842:  DECF   46,F
0843:  BSF    46.5
0844:  COMF   41,F
0845:  COMF   42,F
0846:  COMF   43,F
0847:  COMF   44,F
0848:  INCF   41,F
0849:  BTFSC  03.2
084A:  INCF   42,F
084B:  BTFSC  03.2
084C:  INCF   43,F
084D:  BTFSC  03.2
084E:  INCF   44,F
084F:  MOVLW  3B
0850:  MOVWF  4D
0851:  MOVLW  9A
0852:  MOVWF  4C
0853:  MOVLW  CA
0854:  MOVWF  4B
0855:  CLRF   4A
0856:  MOVLW  0A
0857:  MOVWF  48
0858:  MOVF   45,W
0859:  BTFSC  03.2
085A:  INCF   46,F
085B:  BSF    03.1
085C:  MOVLW  41
085D:  MOVWF  04
085E:  BCF    03.7
085F:  CLRF   2B
0860:  BTFSC  0B.7
0861:  BSF    2B.7
0862:  BCF    0B.7
0863:  MOVF   44,W
0864:  MOVWF  6C
0865:  MOVF   43,W
0866:  MOVWF  6B
0867:  MOVF   42,W
0868:  MOVWF  6A
0869:  MOVF   41,W
086A:  MOVWF  69
086B:  MOVF   4D,W
086C:  MOVWF  70
086D:  MOVF   4C,W
086E:  MOVWF  6F
086F:  MOVF   4B,W
0870:  MOVWF  6E
0871:  MOVF   4A,W
0872:  MOVWF  6D
0873:  BCF    0A.3
0874:  CALL   2B1
0875:  BSF    0A.3
0876:  BTFSC  2B.7
0877:  BSF    0B.7
0878:  MOVF   78,W
0879:  MOVF   77,F
087A:  BTFSS  03.2
087B:  GOTO   08F
087C:  INCF   45,W
087D:  SUBWF  48,W
087E:  BTFSC  03.2
087F:  GOTO   08F
0880:  MOVF   46,W
0881:  BTFSC  03.2
0882:  GOTO   091
0883:  ANDLW  0F
0884:  SUBWF  48,W
0885:  BTFSC  03.2
0886:  GOTO   089
0887:  BTFSC  03.0
0888:  GOTO   0C9
0889:  BTFSC  46.7
088A:  GOTO   0C9
088B:  BTFSC  46.6
088C:  GOTO   091
088D:  MOVLW  20
088E:  GOTO   0C3
088F:  MOVLW  20
0890:  ANDWF  46,F
0891:  BTFSS  46.5
0892:  GOTO   0A1
0893:  BCF    46.5
0894:  MOVF   45,W
0895:  BTFSS  03.2
0896:  DECF   46,F
0897:  MOVF   77,W
0898:  MOVWF  46
0899:  MOVLW  2D
089A:  MOVWF  4E
089B:  BCF    0A.3
089C:  CALL   733
089D:  BSF    0A.3
089E:  MOVF   46,W
089F:  MOVWF  77
08A0:  CLRF   46
08A1:  MOVF   45,W
08A2:  SUBWF  48,W
08A3:  BTFSS  03.2
08A4:  GOTO   0B1
08A5:  MOVF   77,W
08A6:  MOVWF  46
08A7:  MOVLW  2E
08A8:  MOVWF  4E
08A9:  BCF    0A.3
08AA:  CALL   733
08AB:  BSF    0A.3
08AC:  MOVF   46,W
08AD:  MOVWF  77
08AE:  MOVLW  20
08AF:  ANDWF  46,F
08B0:  MOVLW  00
08B1:  MOVLW  30
08B2:  BTFSS  46.5
08B3:  GOTO   0C3
08B4:  BCF    46.5
08B5:  MOVF   45,W
08B6:  BTFSS  03.2
08B7:  DECF   46,F
08B8:  MOVF   77,W
08B9:  MOVWF  46
08BA:  MOVLW  2D
08BB:  MOVWF  4E
08BC:  BCF    0A.3
08BD:  CALL   733
08BE:  BSF    0A.3
08BF:  MOVF   46,W
08C0:  MOVWF  77
08C1:  CLRF   46
08C2:  MOVLW  30
08C3:  ADDWF  77,F
08C4:  MOVF   77,W
08C5:  MOVWF  4E
08C6:  BCF    0A.3
08C7:  CALL   733
08C8:  BSF    0A.3
08C9:  BCF    03.1
08CA:  CLRF   2B
08CB:  BTFSC  0B.7
08CC:  BSF    2B.7
08CD:  BCF    0B.7
08CE:  MOVF   4D,W
08CF:  MOVWF  6C
08D0:  MOVF   4C,W
08D1:  MOVWF  6B
08D2:  MOVF   4B,W
08D3:  MOVWF  6A
08D4:  MOVF   4A,W
08D5:  MOVWF  69
08D6:  CLRF   70
08D7:  CLRF   6F
08D8:  CLRF   6E
08D9:  MOVLW  0A
08DA:  MOVWF  6D
08DB:  BCF    0A.3
08DC:  CALL   2B1
08DD:  BSF    0A.3
08DE:  BTFSC  2B.7
08DF:  BSF    0B.7
08E0:  MOVF   7A,W
08E1:  MOVWF  4D
08E2:  MOVF   79,W
08E3:  MOVWF  4C
08E4:  MOVF   78,W
08E5:  MOVWF  4B
08E6:  MOVF   77,W
08E7:  MOVWF  4A
08E8:  DECFSZ 48,F
08E9:  GOTO   05B
08EA:  RETURN
....................  
.................... #list 
....................  
....................  
.................... #device adc=10 
.................... #fuses XT, NOWDT, NOPROTECT, BROWNOUT, PUT, NOLVP  
.................... #use delay(crystal=4000000)  
*
056F:  MOVLW  4F
0570:  MOVWF  04
0571:  BCF    03.7
0572:  MOVF   00,W
0573:  BTFSC  03.2
0574:  GOTO   583
0575:  MOVLW  01
0576:  MOVWF  78
0577:  CLRF   77
0578:  DECFSZ 77,F
0579:  GOTO   578
057A:  DECFSZ 78,F
057B:  GOTO   577
057C:  MOVLW  4A
057D:  MOVWF  77
057E:  DECFSZ 77,F
057F:  GOTO   57E
0580:  GOTO   581
0581:  DECFSZ 00,F
0582:  GOTO   575
0583:  RETURN
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7)  
....................  
.................... #byte SSPBUF = 0x13  // Dirección del Registro para 16F877  
.................... //#byte SSPBUF = 0xFC9  // Dirección del Registro para 18F4550 
....................  
.................... // Modos de comunicación SPI  
.................... #define SPI_MODE_0  (SPI_L_TO_H | SPI_XMIT_L_TO_H)  
....................  
.................... #define use_portd_lcd true 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
059C:  MOVLW  0F
059D:  BSF    03.5
059E:  ANDWF  08,W
059F:  IORLW  F0
05A0:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
05A1:  BCF    03.5
05A2:  BSF    08.2
....................    delay_cycles(1); 
05A3:  NOP
....................    lcd_output_enable(1); 
05A4:  BSF    08.0
....................    delay_cycles(1); 
05A5:  NOP
....................    high = lcd_read_nibble(); 
05A6:  CALL   590
05A7:  MOVF   78,W
05A8:  MOVWF  56
....................        
....................    lcd_output_enable(0); 
05A9:  BCF    08.0
....................    delay_cycles(1); 
05AA:  NOP
....................    lcd_output_enable(1); 
05AB:  BSF    08.0
....................    delay_us(1); 
05AC:  NOP
....................    low = lcd_read_nibble(); 
05AD:  CALL   590
05AE:  MOVF   78,W
05AF:  MOVWF  55
....................        
....................    lcd_output_enable(0); 
05B0:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
05B1:  MOVLW  0F
05B2:  BSF    03.5
05B3:  ANDWF  08,W
05B4:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
05B5:  BCF    03.5
05B6:  SWAPF  56,W
05B7:  MOVWF  77
05B8:  MOVLW  F0
05B9:  ANDWF  77,F
05BA:  MOVF   77,W
05BB:  IORWF  55,W
05BC:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0590:  MOVF   08,W
0591:  MOVWF  77
0592:  SWAPF  08,W
0593:  ANDLW  0F
0594:  MOVWF  78
....................   #endif 
0595:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0584:  SWAPF  56,W
0585:  ANDLW  F0
0586:  MOVWF  77
0587:  MOVLW  0F
0588:  ANDWF  08,W
0589:  IORWF  77,W
058A:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
058B:  NOP
....................    lcd_output_enable(1); 
058C:  BSF    08.0
....................    delay_us(2); 
058D:  GOTO   58E
....................    lcd_output_enable(0); 
058E:  BCF    08.0
058F:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0596:  BSF    03.5
0597:  BCF    08.0
....................    lcd_rs_tris(); 
0598:  BCF    08.1
....................    lcd_rw_tris(); 
0599:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
059A:  BCF    03.5
059B:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
05BD:  MOVF   78,W
05BE:  MOVWF  55
05BF:  BTFSC  55.7
05C0:  GOTO   59C
....................    lcd_output_rs(address); 
05C1:  BTFSS  53.0
05C2:  BCF    08.1
05C3:  BTFSC  53.0
05C4:  BSF    08.1
....................    delay_cycles(1); 
05C5:  NOP
....................    lcd_output_rw(0); 
05C6:  BCF    08.2
....................    delay_cycles(1); 
05C7:  NOP
....................    lcd_output_enable(0); 
05C8:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
05C9:  SWAPF  54,W
05CA:  MOVWF  55
05CB:  MOVLW  0F
05CC:  ANDWF  55,F
05CD:  MOVF   55,W
05CE:  MOVWF  56
05CF:  CALL   584
....................    lcd_send_nibble(n & 0xf); 
05D0:  MOVF   54,W
05D1:  ANDLW  0F
05D2:  MOVWF  55
05D3:  MOVWF  56
05D4:  CALL   584
05D5:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
05D6:  MOVLW  28
05D7:  MOVWF  42
05D8:  MOVLW  0C
05D9:  MOVWF  43
05DA:  MOVLW  01
05DB:  MOVWF  44
05DC:  MOVLW  06
05DD:  MOVWF  45
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
05DE:  BCF    08.0
....................    lcd_output_rs(0); 
05DF:  BCF    08.1
....................    lcd_output_rw(0); 
05E0:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
05E1:  MOVLW  0F
05E2:  BSF    03.5
05E3:  ANDWF  08,W
05E4:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
05E5:  BCF    08.0
....................    lcd_rs_tris(); 
05E6:  BCF    08.1
....................    lcd_rw_tris(); 
05E7:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
05E8:  MOVLW  0F
05E9:  BCF    03.5
05EA:  MOVWF  4F
05EB:  CALL   56F
....................    for(i=1;i<=3;++i) 
05EC:  MOVLW  01
05ED:  MOVWF  41
05EE:  MOVF   41,W
05EF:  SUBLW  03
05F0:  BTFSS  03.0
05F1:  GOTO   5FA
....................    { 
....................        lcd_send_nibble(3); 
05F2:  MOVLW  03
05F3:  MOVWF  56
05F4:  CALL   584
....................        delay_ms(5); 
05F5:  MOVLW  05
05F6:  MOVWF  4F
05F7:  CALL   56F
05F8:  INCF   41,F
05F9:  GOTO   5EE
....................    } 
....................     
....................    lcd_send_nibble(2); 
05FA:  MOVLW  02
05FB:  MOVWF  56
05FC:  CALL   584
....................    delay_ms(5); 
05FD:  MOVLW  05
05FE:  MOVWF  4F
05FF:  CALL   56F
....................    for(i=0;i<=3;++i) 
0600:  CLRF   41
0601:  MOVF   41,W
0602:  SUBLW  03
0603:  BTFSS  03.0
0604:  GOTO   611
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0605:  MOVLW  42
0606:  ADDWF  41,W
0607:  MOVWF  04
0608:  BCF    03.7
0609:  MOVF   00,W
060A:  MOVWF  46
060B:  CLRF   53
060C:  MOVF   46,W
060D:  MOVWF  54
060E:  CALL   596
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
060F:  INCF   41,F
0610:  GOTO   601
0611:  BSF    0A.3
0612:  BCF    0A.4
0613:  GOTO   14A (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0721:  DECFSZ 50,W
0722:  GOTO   724
0723:  GOTO   727
....................       address=LCD_LINE_TWO; 
0724:  MOVLW  40
0725:  MOVWF  51
0726:  GOTO   728
....................    else 
....................       address=0; 
0727:  CLRF   51
....................       
....................    address+=x-1; 
0728:  MOVLW  01
0729:  SUBWF  4F,W
072A:  ADDWF  51,F
....................    lcd_send_byte(0,0x80|address); 
072B:  MOVF   51,W
072C:  IORLW  80
072D:  MOVWF  52
072E:  CLRF   53
072F:  MOVF   52,W
0730:  MOVWF  54
0731:  CALL   596
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0732:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0733:  MOVF   4E,W
0734:  XORLW  07
0735:  BTFSC  03.2
0736:  GOTO   741
0737:  XORLW  0B
0738:  BTFSC  03.2
0739:  GOTO   746
073A:  XORLW  06
073B:  BTFSC  03.2
073C:  GOTO   74E
073D:  XORLW  02
073E:  BTFSC  03.2
073F:  GOTO   754
0740:  GOTO   759
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0741:  MOVLW  01
0742:  MOVWF  4F
0743:  MOVWF  50
0744:  CALL   721
0745:  GOTO   75E
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0746:  CLRF   53
0747:  MOVLW  01
0748:  MOVWF  54
0749:  CALL   596
....................                      delay_ms(2); 
074A:  MOVLW  02
074B:  MOVWF  4F
074C:  CALL   56F
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
074D:  GOTO   75E
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
074E:  MOVLW  01
074F:  MOVWF  4F
0750:  MOVLW  02
0751:  MOVWF  50
0752:  CALL   721
0753:  GOTO   75E
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0754:  CLRF   53
0755:  MOVLW  10
0756:  MOVWF  54
0757:  CALL   596
0758:  GOTO   75E
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0759:  MOVLW  01
075A:  MOVWF  53
075B:  MOVF   4E,W
075C:  MOVWF  54
075D:  CALL   596
....................      #endif 
....................    } 
075E:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... // Variable global para almacenar el ADC  
.................... int16 pot;  
.................... float voltajeTecleado = 0; 
.................... float voltajeSeteado = 0; 
.................... float voltajeMedido = 0; 
.................... int8 voltajeArray[] = {0,0,0}; 
*
090F:  BCF    03.5
0910:  CLRF   3A
0911:  CLRF   3B
0912:  CLRF   3C
....................  
....................  
....................  
.................... static int8 contador = 0; 
.................... static int8 aux = 0;  
.................... static int8 ventilador = 0; 
.................... // Interrupción por SPI donde se analiza las solicitudes del Maestro 
.................... #int_ssp  
.................... void ssp_isr(void)  
.................... {  
....................    printf("\n\rINT%i", contador); 
*
03C7:  MOVLW  42
03C8:  BSF    03.6
03C9:  MOVWF  0D
03CA:  MOVLW  05
03CB:  MOVWF  0F
03CC:  BCF    03.0
03CD:  MOVLW  05
03CE:  BCF    03.6
03CF:  MOVWF  5C
03D0:  CALL   051
03D1:  MOVF   3D,W
03D2:  MOVWF  5C
03D3:  MOVLW  18
03D4:  MOVWF  5D
....................    contador++; 
*
042F:  INCF   3D,F
....................     
....................    int8 comando; 
....................    comando = SSPBUF; 
0430:  MOVF   13,W
0431:  MOVWF  5B
....................    switch(comando) 
0432:  MOVLW  23
0433:  SUBWF  5B,W
0434:  ADDLW  E9
0435:  BTFSC  03.0
0436:  GOTO   469
0437:  ADDLW  17
0438:  GOTO   527
....................    { 
....................       case '1': 
....................          //printf("\n\rLlega 1"); 
....................          aux = 1; 
0439:  MOVLW  01
043A:  MOVWF  3E
....................       break; 
043B:  GOTO   469
....................       case '2': 
....................          //printf("\n\rLlega 2"); 
....................          aux = 2; 
043C:  MOVLW  02
043D:  MOVWF  3E
....................       break; 
043E:  GOTO   469
....................       case '3': 
....................          //printf("\n\rLlega 3"); 
....................          aux = 3; 
043F:  MOVLW  03
0440:  MOVWF  3E
....................       break; 
0441:  GOTO   469
....................       case '4': 
....................          //printf("\n\rLlega 4"); 
....................          aux = 4; 
0442:  MOVLW  04
0443:  MOVWF  3E
....................       break; 
0444:  GOTO   469
....................       case '5': 
....................          //printf("\n\rLlega 5"); 
....................          aux = 5; 
0445:  MOVLW  05
0446:  MOVWF  3E
....................       break; 
0447:  GOTO   469
....................       case '6': 
....................          //printf("\n\rLlega 6"); 
....................          aux = 6; 
0448:  MOVLW  06
0449:  MOVWF  3E
....................       break; 
044A:  GOTO   469
....................       case '7': 
....................          //printf("\n\rLlega 7"); 
....................          aux = 7; 
044B:  MOVLW  07
044C:  MOVWF  3E
....................       break; 
044D:  GOTO   469
....................       case '8': 
....................          //printf("\n\rLlega 8"); 
....................          aux = 8; 
044E:  MOVLW  08
044F:  MOVWF  3E
....................       break; 
0450:  GOTO   469
....................       case '9': 
....................          //printf("\n\rLlega 9"); 
....................          aux = 9; 
0451:  MOVLW  09
0452:  MOVWF  3E
....................       break; 
0453:  GOTO   469
....................       case '*': 
....................          //printf("\n\rLlega 9"); 
....................          voltajeArray[0] = 0; 
0454:  CLRF   3A
....................          voltajeArray[1] = 0; 
0455:  CLRF   3B
....................          voltajeArray[2] = 0; 
0456:  CLRF   3C
....................          aux = 0; 
0457:  CLRF   3E
....................          contador=3; 
0458:  MOVLW  03
0459:  MOVWF  3D
....................       break; 
045A:  GOTO   469
....................       case '#': 
....................          voltajeSeteado = voltajeTecleado; 
045B:  MOVF   31,W
045C:  MOVWF  35
045D:  MOVF   30,W
045E:  MOVWF  34
045F:  MOVF   2F,W
0460:  MOVWF  33
0461:  MOVF   2E,W
0462:  MOVWF  32
....................          voltajeArray[0] = 0; 
0463:  CLRF   3A
....................          voltajeArray[1] = 0; 
0464:  CLRF   3B
....................          voltajeArray[2] = 0; 
0465:  CLRF   3C
....................          aux = 0; 
0466:  CLRF   3E
....................          contador=3; 
0467:  MOVLW  03
0468:  MOVWF  3D
....................           
....................       break; 
....................        
....................    } 
....................     
....................    voltajeArray[contador-1] = aux; 
0469:  MOVLW  01
046A:  SUBWF  3D,W
046B:  ADDLW  3A
046C:  MOVWF  04
046D:  BCF    03.7
046E:  MOVF   3E,W
046F:  MOVWF  00
....................    if(contador==3) 
0470:  MOVF   3D,W
0471:  SUBLW  03
0472:  BTFSC  03.2
....................       contador = 0; 
0473:  CLRF   3D
....................    //printf(" El auxiliar es %i y el contador esta en %i", aux, contador); 
....................    //printf(" El voltaje seria %i.%i%i", voltajeArray[0],voltajeArray[1],voltajeArray[2]); 
....................    voltajeTecleado = voltajeArray[0] + voltajeArray[1]*(.1) + voltajeArray[2] * (.01); 
0474:  CLRF   65
0475:  MOVF   3B,W
0476:  MOVWF  64
0477:  CALL   0BF
0478:  MOVF   7A,W
0479:  MOVWF  6C
047A:  MOVF   79,W
047B:  MOVWF  6B
047C:  MOVF   78,W
047D:  MOVWF  6A
047E:  MOVF   77,W
047F:  MOVWF  69
0480:  MOVLW  CD
0481:  MOVWF  70
0482:  MOVLW  CC
0483:  MOVWF  6F
0484:  MOVLW  4C
0485:  MOVWF  6E
0486:  MOVLW  7B
0487:  MOVWF  6D
0488:  CALL   0DC
0489:  MOVF   7A,W
048A:  MOVWF  5F
048B:  MOVF   79,W
048C:  MOVWF  5E
048D:  MOVF   78,W
048E:  MOVWF  5D
048F:  MOVF   77,W
0490:  MOVWF  5C
0491:  CLRF   65
0492:  MOVF   3A,W
0493:  MOVWF  64
0494:  CALL   0BF
0495:  BCF    03.1
0496:  MOVF   7A,W
0497:  MOVWF  67
0498:  MOVF   79,W
0499:  MOVWF  66
049A:  MOVF   78,W
049B:  MOVWF  65
049C:  MOVF   77,W
049D:  MOVWF  64
049E:  MOVF   5F,W
049F:  MOVWF  6B
04A0:  MOVF   5E,W
04A1:  MOVWF  6A
04A2:  MOVF   5D,W
04A3:  MOVWF  69
04A4:  MOVF   5C,W
04A5:  MOVWF  68
04A6:  CALL   151
04A7:  MOVF   7A,W
04A8:  MOVWF  63
04A9:  MOVF   79,W
04AA:  MOVWF  62
04AB:  MOVF   78,W
04AC:  MOVWF  61
04AD:  MOVF   77,W
04AE:  MOVWF  60
04AF:  CLRF   65
04B0:  MOVF   3C,W
04B1:  MOVWF  64
04B2:  CALL   0BF
04B3:  MOVF   7A,W
04B4:  MOVWF  6C
04B5:  MOVF   79,W
04B6:  MOVWF  6B
04B7:  MOVF   78,W
04B8:  MOVWF  6A
04B9:  MOVF   77,W
04BA:  MOVWF  69
04BB:  MOVLW  0A
04BC:  MOVWF  70
04BD:  MOVLW  D7
04BE:  MOVWF  6F
04BF:  MOVLW  23
04C0:  MOVWF  6E
04C1:  MOVLW  78
04C2:  MOVWF  6D
04C3:  CALL   0DC
04C4:  BCF    03.1
04C5:  MOVF   63,W
04C6:  MOVWF  67
04C7:  MOVF   62,W
04C8:  MOVWF  66
04C9:  MOVF   61,W
04CA:  MOVWF  65
04CB:  MOVF   60,W
04CC:  MOVWF  64
04CD:  MOVF   7A,W
04CE:  MOVWF  6B
04CF:  MOVF   79,W
04D0:  MOVWF  6A
04D1:  MOVF   78,W
04D2:  MOVWF  69
04D3:  MOVF   77,W
04D4:  MOVWF  68
04D5:  CALL   151
04D6:  MOVF   7A,W
04D7:  MOVWF  31
04D8:  MOVF   79,W
04D9:  MOVWF  30
04DA:  MOVF   78,W
04DB:  MOVWF  2F
04DC:  MOVF   77,W
04DD:  MOVWF  2E
....................    printf("\n\rEl voltaje tecleado es %f", voltajeTecleado); 
04DE:  MOVLW  46
04DF:  BSF    03.6
04E0:  MOVWF  0D
04E1:  MOVLW  05
04E2:  MOVWF  0F
04E3:  BCF    03.0
04E4:  MOVLW  19
04E5:  BCF    03.6
04E6:  MOVWF  5C
04E7:  CALL   051
04E8:  MOVLW  89
04E9:  MOVWF  04
04EA:  MOVF   31,W
04EB:  MOVWF  5F
04EC:  MOVF   30,W
04ED:  MOVWF  5E
04EE:  MOVF   2F,W
04EF:  MOVWF  5D
04F0:  MOVF   2E,W
04F1:  MOVWF  5C
04F2:  MOVLW  02
04F3:  MOVWF  60
04F4:  CALL   300
....................    printf("\n\rEl voltaje seteado es %f", voltajeSeteado); 
04F5:  MOVLW  54
04F6:  BSF    03.6
04F7:  MOVWF  0D
04F8:  MOVLW  05
04F9:  MOVWF  0F
04FA:  BCF    03.0
04FB:  MOVLW  18
04FC:  BCF    03.6
04FD:  MOVWF  5C
04FE:  CALL   051
04FF:  MOVLW  89
0500:  MOVWF  04
0501:  MOVF   35,W
0502:  MOVWF  5F
0503:  MOVF   34,W
0504:  MOVWF  5E
0505:  MOVF   33,W
0506:  MOVWF  5D
0507:  MOVF   32,W
0508:  MOVWF  5C
0509:  MOVLW  02
050A:  MOVWF  60
050B:  CALL   300
....................    printf("\n\rEl voltaje medido es %f", voltajeMedido); 
050C:  MOVLW  62
050D:  BSF    03.6
050E:  MOVWF  0D
050F:  MOVLW  05
0510:  MOVWF  0F
0511:  BCF    03.0
0512:  MOVLW  17
0513:  BCF    03.6
0514:  MOVWF  5C
0515:  CALL   051
0516:  MOVLW  89
0517:  MOVWF  04
0518:  MOVF   39,W
0519:  MOVWF  5F
051A:  MOVF   38,W
051B:  MOVWF  5E
051C:  MOVF   37,W
051D:  MOVWF  5D
051E:  MOVF   36,W
051F:  MOVWF  5C
0520:  MOVLW  02
0521:  MOVWF  60
0522:  CALL   300
....................     
0523:  BCF    0C.3
0524:  BCF    0A.3
0525:  BCF    0A.4
0526:  GOTO   02D
.................... }  
....................       //======================================  
.................... void main()  
*
08EB:  MOVF   03,W
08EC:  ANDLW  1F
08ED:  MOVWF  03
08EE:  MOVLW  19
08EF:  BSF    03.5
08F0:  MOVWF  19
08F1:  MOVLW  A6
08F2:  MOVWF  18
08F3:  MOVLW  90
08F4:  BCF    03.5
08F5:  MOVWF  18
08F6:  CLRF   31
08F7:  CLRF   30
08F8:  CLRF   2F
08F9:  CLRF   2E
08FA:  CLRF   35
08FB:  CLRF   34
08FC:  CLRF   33
08FD:  CLRF   32
08FE:  CLRF   39
08FF:  CLRF   38
0900:  CLRF   37
0901:  CLRF   36
0902:  CLRF   3D
0903:  CLRF   3E
0904:  CLRF   3F
0905:  MOVLW  FF
0906:  MOVWF  40
0907:  BSF    03.5
0908:  BSF    1F.0
0909:  BSF    1F.1
090A:  BSF    1F.2
090B:  BCF    1F.3
090C:  MOVLW  07
090D:  MOVWF  1C
090E:  BCF    03.7
.................... {  
....................    //-----------------BLOQUE  ADC----------------- 
....................    // Configura AN0 como analoga 
....................    setup_adc_ports(AN0); //16F887 
*
0913:  BSF    03.5
0914:  BCF    1F.0
0915:  BSF    1F.1
0916:  BSF    1F.2
0917:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_8);  
0918:  BCF    1F.6
0919:  BCF    03.5
091A:  BSF    1F.6
091B:  BCF    1F.7
091C:  BSF    03.5
091D:  BSF    1F.7
091E:  BCF    03.5
091F:  BSF    1F.0
....................    set_adc_channel(0);  
0920:  MOVLW  00
0921:  MOVWF  78
0922:  MOVF   1F,W
0923:  ANDLW  C7
0924:  IORWF  78,W
0925:  MOVWF  1F
....................    //-----------------BLOQUE  ADC----------------- 
....................     
....................    delay_us(20);  
0926:  MOVLW  06
0927:  MOVWF  77
0928:  DECFSZ 77,F
0929:  GOTO   128
092A:  NOP
....................     
....................    //-----------------BLOQUE  SPI----------------- 
....................    //Inicializa el hardware SSP para ser un SPI esclavo en Modo 0 
....................    setup_spi(SPI_SLAVE | SPI_MODE_0);  
092B:  BCF    14.5
092C:  BCF    40.5
092D:  MOVF   40,W
092E:  BSF    03.5
092F:  MOVWF  07
0930:  BCF    03.5
0931:  BSF    40.4
0932:  MOVF   40,W
0933:  BSF    03.5
0934:  MOVWF  07
0935:  BSF    05.5
0936:  BCF    03.5
0937:  BSF    40.3
0938:  MOVF   40,W
0939:  BSF    03.5
093A:  MOVWF  07
093B:  MOVLW  24
093C:  BCF    03.5
093D:  MOVWF  14
093E:  MOVLW  40
093F:  BSF    03.5
0940:  MOVWF  14
....................    // Habilita las interrupciones 
....................    clear_interrupt(INT_SSP);  
0941:  BCF    03.5
0942:  BCF    0C.3
....................    enable_interrupts(INT_SSP);  
0943:  BSF    03.5
0944:  BSF    0C.3
....................    enable_interrupts(GLOBAL);  
0945:  MOVLW  C0
0946:  BCF    03.5
0947:  IORWF  0B,F
....................    //-----------------BLOQUE  SPI----------------- 
....................     
....................    //-----------------BLOQUE  LCD----------------- 
....................    lcd_init(); 
0948:  BCF    0A.3
0949:  GOTO   5D6
094A:  BSF    0A.3
....................    //-----------------BLOQUE  LCD----------------- 
....................     
....................    // Actualiza la lectura analoga cada 20ms  
....................    while(1)  
....................    {  
....................       pot = read_adc();  
094B:  BSF    1F.2
094C:  BTFSC  1F.2
094D:  GOTO   14C
094E:  BSF    03.5
094F:  MOVF   1E,W
0950:  BCF    03.5
0951:  MOVWF  2C
0952:  MOVF   1E,W
0953:  MOVWF  2D
0954:  CLRF   2B
0955:  BTFSC  0B.7
0956:  BSF    2B.7
0957:  BCF    0B.7
....................       voltajeMedido = (5.0*pot/1024.0); 
0958:  MOVF   2D,W
0959:  MOVWF  65
095A:  MOVF   2C,W
095B:  MOVWF  64
095C:  BCF    0A.3
095D:  CALL   0BF
095E:  BSF    0A.3
095F:  BTFSC  2B.7
0960:  BSF    0B.7
0961:  CLRF   2B
0962:  BTFSC  0B.7
0963:  BSF    2B.7
0964:  BCF    0B.7
0965:  CLRF   6C
0966:  CLRF   6B
0967:  MOVLW  20
0968:  MOVWF  6A
0969:  MOVLW  81
096A:  MOVWF  69
096B:  MOVF   7A,W
096C:  MOVWF  70
096D:  MOVF   79,W
096E:  MOVWF  6F
096F:  MOVF   78,W
0970:  MOVWF  6E
0971:  MOVF   77,W
0972:  MOVWF  6D
0973:  BCF    0A.3
0974:  CALL   0DC
0975:  BSF    0A.3
0976:  BTFSC  2B.7
0977:  BSF    0B.7
0978:  MOVF   7A,W
0979:  MOVWF  44
097A:  MOVF   79,W
097B:  MOVWF  43
097C:  MOVF   78,W
097D:  MOVWF  42
097E:  MOVF   77,W
097F:  MOVWF  41
0980:  MOVF   44,W
0981:  MOVWF  48
0982:  MOVF   43,W
0983:  MOVWF  47
0984:  MOVF   42,W
0985:  MOVWF  46
0986:  MOVF   41,W
0987:  MOVWF  45
0988:  CLRF   4C
0989:  CLRF   4B
098A:  CLRF   4A
098B:  MOVLW  89
098C:  MOVWF  49
098D:  BCF    0A.3
098E:  GOTO   614
098F:  BSF    0A.3
0990:  MOVF   7A,W
0991:  MOVWF  39
0992:  MOVF   79,W
0993:  MOVWF  38
0994:  MOVF   78,W
0995:  MOVWF  37
0996:  MOVF   77,W
0997:  MOVWF  36
....................       //printf("Voltaje: %f\n\r", voltaje); 
....................       delay_ms(20);  
0998:  MOVLW  14
0999:  MOVWF  4F
099A:  BCF    0A.3
099B:  CALL   56F
099C:  BSF    0A.3
....................       if(voltajeMedido>=voltajeSeteado) 
099D:  MOVF   35,W
099E:  MOVWF  44
099F:  MOVF   34,W
09A0:  MOVWF  43
09A1:  MOVF   33,W
09A2:  MOVWF  42
09A3:  MOVF   32,W
09A4:  MOVWF  41
09A5:  MOVF   39,W
09A6:  MOVWF  48
09A7:  MOVF   38,W
09A8:  MOVWF  47
09A9:  MOVF   37,W
09AA:  MOVWF  46
09AB:  MOVF   36,W
09AC:  MOVWF  45
09AD:  BCF    0A.3
09AE:  GOTO   6E0
09AF:  BSF    0A.3
09B0:  BTFSC  03.0
09B1:  GOTO   1B4
09B2:  BTFSS  03.2
09B3:  GOTO   1B7
....................          ventilador = 1; 
09B4:  MOVLW  01
09B5:  MOVWF  3F
09B6:  GOTO   1B8
....................       else 
....................          ventilador = 0; 
09B7:  CLRF   3F
....................       lcd_gotoxy (1,1); 
09B8:  MOVLW  01
09B9:  MOVWF  4F
09BA:  MOVWF  50
09BB:  BCF    0A.3
09BC:  CALL   721
09BD:  BSF    0A.3
....................       printf(lcd_putc, "Vm=%f", voltajeMedido); 
09BE:  MOVLW  56
09BF:  MOVWF  4E
09C0:  BCF    0A.3
09C1:  CALL   733
09C2:  BSF    0A.3
09C3:  MOVLW  6D
09C4:  MOVWF  4E
09C5:  BCF    0A.3
09C6:  CALL   733
09C7:  BSF    0A.3
09C8:  MOVLW  3D
09C9:  MOVWF  4E
09CA:  BCF    0A.3
09CB:  CALL   733
09CC:  BSF    0A.3
09CD:  MOVLW  89
09CE:  MOVWF  04
09CF:  MOVF   39,W
09D0:  MOVWF  44
09D1:  MOVF   38,W
09D2:  MOVWF  43
09D3:  MOVF   37,W
09D4:  MOVWF  42
09D5:  MOVF   36,W
09D6:  MOVWF  41
09D7:  MOVLW  02
09D8:  MOVWF  45
09D9:  CALL   000
....................       lcd_gotoxy (10,1); 
09DA:  MOVLW  0A
09DB:  MOVWF  4F
09DC:  MOVLW  01
09DD:  MOVWF  50
09DE:  BCF    0A.3
09DF:  CALL   721
09E0:  BSF    0A.3
....................       printf(lcd_putc, "Vs=%f", voltajeSeteado); 
09E1:  MOVLW  56
09E2:  MOVWF  4E
09E3:  BCF    0A.3
09E4:  CALL   733
09E5:  BSF    0A.3
09E6:  MOVLW  73
09E7:  MOVWF  4E
09E8:  BCF    0A.3
09E9:  CALL   733
09EA:  BSF    0A.3
09EB:  MOVLW  3D
09EC:  MOVWF  4E
09ED:  BCF    0A.3
09EE:  CALL   733
09EF:  BSF    0A.3
09F0:  MOVLW  89
09F1:  MOVWF  04
09F2:  MOVF   35,W
09F3:  MOVWF  44
09F4:  MOVF   34,W
09F5:  MOVWF  43
09F6:  MOVF   33,W
09F7:  MOVWF  42
09F8:  MOVF   32,W
09F9:  MOVWF  41
09FA:  MOVLW  02
09FB:  MOVWF  45
09FC:  CALL   000
....................       lcd_gotoxy (1,2); 
09FD:  MOVLW  01
09FE:  MOVWF  4F
09FF:  MOVLW  02
0A00:  MOVWF  50
0A01:  BCF    0A.3
0A02:  CALL   721
0A03:  BSF    0A.3
....................       printf(lcd_putc, "Vt=%f", voltajeTecleado); 
0A04:  MOVLW  56
0A05:  MOVWF  4E
0A06:  BCF    0A.3
0A07:  CALL   733
0A08:  BSF    0A.3
0A09:  MOVLW  74
0A0A:  MOVWF  4E
0A0B:  BCF    0A.3
0A0C:  CALL   733
0A0D:  BSF    0A.3
0A0E:  MOVLW  3D
0A0F:  MOVWF  4E
0A10:  BCF    0A.3
0A11:  CALL   733
0A12:  BSF    0A.3
0A13:  MOVLW  89
0A14:  MOVWF  04
0A15:  MOVF   31,W
0A16:  MOVWF  44
0A17:  MOVF   30,W
0A18:  MOVWF  43
0A19:  MOVF   2F,W
0A1A:  MOVWF  42
0A1B:  MOVF   2E,W
0A1C:  MOVWF  41
0A1D:  MOVLW  02
0A1E:  MOVWF  45
0A1F:  CALL   000
....................       lcd_gotoxy (10,2); 
0A20:  MOVLW  0A
0A21:  MOVWF  4F
0A22:  MOVLW  02
0A23:  MOVWF  50
0A24:  BCF    0A.3
0A25:  CALL   721
0A26:  BSF    0A.3
....................       printf(lcd_putc, "ON=%i", ventilador); 
0A27:  MOVLW  4F
0A28:  MOVWF  4E
0A29:  BCF    0A.3
0A2A:  CALL   733
0A2B:  BSF    0A.3
0A2C:  MOVLW  4E
0A2D:  MOVWF  4E
0A2E:  BCF    0A.3
0A2F:  CALL   733
0A30:  BSF    0A.3
0A31:  MOVLW  3D
0A32:  MOVWF  4E
0A33:  BCF    0A.3
0A34:  CALL   733
0A35:  BSF    0A.3
0A36:  MOVF   3F,W
0A37:  MOVWF  41
0A38:  MOVLW  18
0A39:  MOVWF  42
0A3A:  BCF    0A.3
0A3B:  GOTO   75F
0A3C:  BSF    0A.3
0A3D:  GOTO   14B
....................    }  
.................... } 
....................  
0A3E:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
